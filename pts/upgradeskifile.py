#!/usr/bin/env python
# -*- coding: utf8 -*-
# *****************************************************************
# **       PTS -- Python Toolkit for working with SKIRT          **
# **       Â© Astronomical Observatory, Ghent University          **
# *****************************************************************

## \package pts.upgradeskifile Upgrade a ski file to the latest format version
#
# The function in this module upgrades a ski file to the latest format version.
# Any ski file generated by a SKIRT6 built from the repository source after January 1, 2013
# should be propertly adjusted to the most recent format version (at least, that's the goal).
#

# -----------------------------------------------------------------

import os
import os.path
from datetime import datetime
from pts.skifile import SkiFile

# -----------------------------------------------------------------

## This function upgrades the specified ski file to the latest format version, if needed. If so, a backup copy of
# the original ski file is placed next to it, and the original ski file is overwritten with the upgraded version.
# The function returns true if the ski file was changed (and a backup copy was made), false otherwise.
#
# The filename argument should include the ".ski" extension and may include an absolute or relative path.
# The name of the backup copy (if one is made) includes a time stamp and has the ".xml" filename extension.
#
def upgradeskifile(skifile):
    skifile = os.path.expanduser(skifile)
    assert skifile.endswith(".ski")

    # define the upgrade conditions and transforms
    upgrades = _get_upgrade_definitions()

    # open the ski file and apply the upgrades if needed
    ski = SkiFile(skifile)
    changed = False
    for condition,templates in upgrades:
        changed |= ski.transformif(condition, templates)

    # if there were changes, make a backup copy and save the updated file over the original
    if changed:
        backup = skifile[:-4] + "_" + datetime.now().strftime("%Y-%m-%d--%H-%M-%S") + "_backupski.xml"
        os.rename(skifile, backup)
        ski.saveto(skifile)

    # for debugging purposes: if there were changes, save a copy under a new name
#    if changed:
#        ski.saveto(skifile[:-4]+"_upgraded.ski")
#        os.rename(skifile[:-4]+"_upgraded.ski", skifile[:-4]+"_upgraded.xml")

    return changed

# -----------------------------------------------------------------

## This private function returns a sequence of 2-tuples, each defining the XPath condition and XSLT templates
# for a single modification to the ski file format. The svn revision number listed for each item identifies
# the change in the SKIRT code requiring that ski file modification.
def _get_upgrade_definitions():
    # start the list
    return (

    # svn 302: in binary tree dust grids, replace the barycentric attribute by the directionMethod attribute
    # using an appropriate enumeration value depending on the original attribute value
    ('''//BinTreeDustGridStructure/@barycentric''',
    '''
    <xsl:template match="//BinTreeDustGridStructure/@barycentric">
        <xsl:attribute name="directionMethod">
            <xsl:choose>
                <xsl:when test="number()=1 or starts-with(.,'t') or starts-with(.,'T') or starts-with(.,'y') or starts-with(.,'Y')">
                    <xsl:value-of select="'Barycenter'"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="'Alternating'"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:attribute>
    </xsl:template>
    '''),

    # svn 356: in SEDInstrument elements, remove the attributes pixelsX, extentX, pixelsY, extentY
    ('''//SEDInstrument/@pixelsX | //SEDInstrument/@extentX | //SEDInstrument/@pixelsY | //SEDInstrument/@extentY''',
    '''
    <xsl:template match="//SEDInstrument/@pixelsX | //SEDInstrument/@extentX | //SEDInstrument/@pixelsY | //SEDInstrument/@extentY">
    </xsl:template>
    '''),

    # svn 441: in AdaptiveMeshXxxx elements, move the filename attribute to a nested element
    ('''//AdaptiveMeshDustDistribution/@filename | //AdaptiveMeshDustGeometry/@filename | //AdaptiveMeshStellarSystem/@filename''',
    '''
    <xsl:template match="//AdaptiveMeshDustDistribution | //AdaptiveMeshDustGeometry | //AdaptiveMeshStellarSystem">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
            <xsl:element name="adaptiveMeshFile">
                <xsl:attribute name="type">
                    <xsl:value-of select="'AdaptiveMeshFile'"/>
                </xsl:attribute>
                <xsl:element name="AdaptiveMeshAsciiFile">
                    <xsl:attribute name="filename">
                        <xsl:value-of select="@filename"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:element>
        </xsl:copy>
    </xsl:template>
    <xsl:template match="//AdaptiveMeshDustDistribution/@filename | //AdaptiveMeshDustGeometry/@filename | //AdaptiveMeshStellarSystem/@filename">
    </xsl:template>
    '''),

    # svn 495: replace OligoDustMix elements by InterstellarDustMix elements
    ('''//OligoDustMix''',
    '''
    <xsl:template match="OligoDustMix">
        <xsl:element name="InterstellarDustMix">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    '''),

    # svn 547: replace AdaptiveMeshDustComponent elements by MeshDustComponent elements
    ('''//AdaptiveMeshDustComponent''',
    '''
    <xsl:template match="AdaptiveMeshDustDistribution/components/@type">
        <xsl:attribute name="type">
            <xsl:value-of select="'MeshDustComponent'"/>
        </xsl:attribute>
    </xsl:template>
    <xsl:template match="AdaptiveMeshDustComponent">
        <xsl:element name="MeshDustComponent">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    '''),

    # svn 580: replace StellarGeometry elements by Geometry elements
    ('''//geometry[@type='StellarGeometry']''',
    '''
    <xsl:template match="geometry[@type='StellarGeometry']/@type">
        <xsl:attribute name="type">
            <xsl:value-of select="'Geometry'"/>
        </xsl:attribute>
    </xsl:template>
    <xsl:template match="CentralStarStellarGeometry">
        <xsl:element name="PointGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="GaussianStellarGeometry">
        <xsl:element name="GaussianGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="GammaStellarGeometry">
        <xsl:element name="GammaGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="PlummerStellarGeometry">
        <xsl:element name="PlummerGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="SersicStellarGeometry">
        <xsl:element name="SersicGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ExpDiskStellarGeometry">
        <xsl:element name="ExpDiskGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="TruncatedExpDiskStellarGeometry">
        <xsl:element name="ExpDiskGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ExpDiskSpiralArmsStellarGeometry">
        <xsl:element name="ExpDiskSpiralArmsGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="FlattenedGammaStellarGeometry">
        <xsl:element name="SpheroidalGeometry">
            <xsl:apply-templates select="@*[name()='flattening']"/>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SpheGeometry'"/>
                </xsl:attribute>
                <xsl:element name="GammaGeometry">
                    <xsl:apply-templates select="@*[name()!='flattening']|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="FlattenedPlummerStellarGeometry">
        <xsl:element name="SpheroidalGeometry">
            <xsl:apply-templates select="@*[name()='flattening']"/>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SpheGeometry'"/>
                </xsl:attribute>
                <xsl:element name="PlummerGeometry">
                    <xsl:apply-templates select="@*[name()!='flattening']|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="FlattenedSersicStellarGeometry">
        <xsl:element name="SpheroidalGeometry">
            <xsl:apply-templates select="@*[name()='flattening']"/>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SpheGeometry'"/>
                </xsl:attribute>
                <xsl:element name="SersicGeometry">
                    <xsl:apply-templates select="@*[name()!='flattening']|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="PseudoSersicStellarGeometry">
        <xsl:element name="SpheroidalGeometry">
            <xsl:apply-templates select="@*[name()='flattening']"/>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SpheGeometry'"/>
                </xsl:attribute>
                <xsl:element name="PseudoSersicGeometry">
                    <xsl:apply-templates select="@*[name()!='flattening']|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="MGEStellarGeometry">
        <xsl:element name="MGEGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="AdaptiveMeshStellarGeometry">
        <xsl:element name="AdaptiveMeshGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="VoronoiStellarGeometry">
        <xsl:element name="VoronoiGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="OffsetStellarGeometry">
        <xsl:element name="OffsetGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    '''),

    # svn 580: replace DustGeometry elements by Geometry elements
    ('''//geometry[@type='DustGeometry']''',
    '''
    <xsl:template match="geometry[@type='DustGeometry']/@type">
        <xsl:attribute name="type">
            <xsl:value-of select="'Geometry'"/>
        </xsl:attribute>
    </xsl:template>
    <xsl:template match="PlummerDustGeometry">
        <xsl:element name="PlummerGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="SersicDustGeometry">
        <xsl:element name="SersicGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ShellDustGeometry">
        <xsl:element name="ShellGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ExpDiskDustGeometry">
        <xsl:element name="ExpDiskGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="TruncatedExpDiskDustGeometry">
        <xsl:element name="ExpDiskGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ExpDiskSpiralArmsDustGeometry">
        <xsl:element name="ExpDiskSpiralArmsGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="TTauriDiskDustGeometry">
        <xsl:element name="TTauriDiskGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="FlattenedPlummerDustGeometry">
        <xsl:element name="SpheroidalGeometry">
            <xsl:apply-templates select="@*[name()='flattening']"/>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SpheGeometry'"/>
                </xsl:attribute>
                <xsl:element name="PlummerGeometry">
                    <xsl:apply-templates select="@*[name()!='flattening']|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="FlattenedSersicDustGeometry">
        <xsl:element name="SpheroidalGeometry">
            <xsl:apply-templates select="@*[name()='flattening']"/>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SpheGeometry'"/>
                </xsl:attribute>
                <xsl:element name="SersicGeometry">
                    <xsl:apply-templates select="@*[name()!='flattening']|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="PseudoSersicDustGeometry">
        <xsl:element name="SpheroidalGeometry">
            <xsl:apply-templates select="@*[name()='flattening']"/>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SpheGeometry'"/>
                </xsl:attribute>
                <xsl:element name="PseudoSersicGeometry">
                    <xsl:apply-templates select="@*[name()!='flattening']|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="RingDustGeometry">
        <xsl:element name="RingGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="TorusDustGeometry">
        <xsl:element name="TorusGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ClumpyTorusDustGeometry">
        <xsl:element name="ClumpyGeometry">
            <xsl:apply-templates select="@*[name()='clumpFraction']|@*[name()='clumpCount']|@*[name()='clumpRadius']"/>
            <xsl:element name="kernel">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SmoothingKernel'"/>
                </xsl:attribute>
                <xsl:element name="CubicSplineSmoothingKernel"/>
            </xsl:element>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'Geometry'"/>
                </xsl:attribute>
                <xsl:element name="TorusGeometry">
                    <xsl:attribute name="expon">
                        <xsl:value-of select="@smoothExpon"/>
                    </xsl:attribute>
                    <xsl:attribute name="index">
                        <xsl:value-of select="@smoothIndex"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="@*[name()='openAngle']|@*[name()='minRadius']|@*[name()='maxRadius']"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ClumpyExpDiskDustGeometry">
        <xsl:element name="ClumpyGeometry">
            <xsl:apply-templates select="@*[name()='clumpFraction']|@*[name()='clumpCount']|@*[name()='clumpRadius']"/>
            <xsl:element name="kernel">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SmoothingKernel'"/>
                </xsl:attribute>
                <xsl:element name="CubicSplineSmoothingKernel"/>
            </xsl:element>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'Geometry'"/>
                </xsl:attribute>
                <xsl:element name="ExpDiskGeometry">
                    <xsl:attribute name="radialScale">
                        <xsl:value-of select="@radialScaleSmooth"/>
                    </xsl:attribute>
                    <xsl:attribute name="axialScale">
                        <xsl:value-of select="@axialScaleSmooth"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ClumpyExpDiskSpiralArmsDustGeometry">
        <xsl:element name="ClumpyGeometry">
            <xsl:apply-templates select="@*[name()='clumpFraction']|@*[name()='clumpCount']|@*[name()='clumpRadius']"/>
            <xsl:element name="kernel">
                <xsl:attribute name="type">
                    <xsl:value-of select="'SmoothingKernel'"/>
                </xsl:attribute>
                <xsl:element name="CubicSplineSmoothingKernel"/>
            </xsl:element>
            <xsl:element name="geometry">
                <xsl:attribute name="type">
                    <xsl:value-of select="'Geometry'"/>
                </xsl:attribute>
                <xsl:element name="ExpDiskSpiralArmsGeometry">
                    <xsl:attribute name="radialScale">
                        <xsl:value-of select="@radialScaleSmooth"/>
                    </xsl:attribute>
                    <xsl:attribute name="axialScale">
                        <xsl:value-of select="@axialScaleSmooth"/>
                    </xsl:attribute>
                    <xsl:attribute name="arms">
                        <xsl:value-of select="@armsSmooth"/>
                    </xsl:attribute>
                    <xsl:attribute name="pitch">
                        <xsl:value-of select="@pitchSmooth"/>
                    </xsl:attribute>
                    <xsl:attribute name="perturbWeight">
                        <xsl:value-of select="@perturbWeightSmooth"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    <xsl:template match="MGEDustGeometry">
        <xsl:element name="MGEGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="AdaptiveMeshDustGeometry">
        <xsl:element name="AdaptiveMeshGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="VoronoiDustGeometry">
        <xsl:element name="VoronoiGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="OffsetDustGeometry">
        <xsl:element name="OffsetGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="Trust7aDustGeometry">
        <xsl:element name="Trust7aGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="Trust7bDustGeometry">
        <xsl:element name="Trust7bGeometry">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    '''),

    # svn 603: replace PanDustSystem attributes dustEmission and transient by nested elements
    ('''//PanDustSystem/@dustEmission | //PanDustSystem/@transient''',
    '''
    <xsl:template match="//PanDustSystem">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
            <xsl:if test="number(@dustEmission)=1 or starts-with(@dustEmission,'t') or starts-with(@dustEmission,'T') or starts-with(@dustEmission,'y') or starts-with(@dustEmission,'Y')">
                <xsl:choose>
                    <xsl:when test="number(@transient)=1 or starts-with(@transient,'t') or starts-with(@transient,'T') or starts-with(@transient,'y') or starts-with(@transient,'Y')">
                        <xsl:element name="dustEmissivity">
                            <xsl:attribute name="type">
                                <xsl:value-of select="'DustEmissivity'"/>
                            </xsl:attribute>
                            <xsl:element name="DustEmDustEmissivity"/>
                        </xsl:element>
                        <xsl:element name="dustLib">
                            <xsl:attribute name="type">
                                <xsl:value-of select="'DustLib'"/>
                            </xsl:attribute>
                            <xsl:element name="Dim2DustLib"/>
                        </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:element name="dustEmissivity">
                            <xsl:attribute name="type">
                                <xsl:value-of select="'DustEmissivity'"/>
                            </xsl:attribute>
                            <xsl:element name="GreyBodyDustEmissivity"/>
                        </xsl:element>
                        <xsl:element name="dustLib">
                            <xsl:attribute name="type">
                                <xsl:value-of select="'DustLib'"/>
                            </xsl:attribute>
                            <xsl:element name="Dim1DustLib"/>
                        </xsl:element>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>
        </xsl:copy>
    </xsl:template>
    <xsl:template match="//PanDustSystem/@dustEmission | //PanDustSystem/@transient">
    </xsl:template>
    '''),

    # git 42 (June 26, 2014): replace CompStellarSystem element by identical StellarSystem element
    ('''//CompStellarSystem''',
    '''
    <xsl:template match="CompStellarSystem">
        <xsl:element name="StellarSystem">
            <xsl:apply-templates select="@*|node()"/>
        </xsl:element>
    </xsl:template>
    '''),

    # git 42 (June 26, 2014): replace SPH/AdaptiveMesh/VoronoiStellarSystem element by StellarSystem element
    #                         with nested SPH/AdaptiveMesh/VoronoiStellarComp
    ('''//SPHStellarSystem''',
    '''
    <xsl:template match="SPHStellarSystem">
        <xsl:element name="StellarSystem">
            <xsl:element name="components">
                <xsl:attribute name="type">
                    <xsl:value-of select="'StellarComp'"/>
                </xsl:attribute>
                <xsl:element name="SPHStellarComp">
                    <xsl:apply-templates select="@*|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    '''),
    ('''//AdaptiveMeshStellarSystem''',
    '''
    <xsl:template match="AdaptiveMeshStellarSystem">
        <xsl:element name="StellarSystem">
            <xsl:element name="components">
                <xsl:attribute name="type">
                    <xsl:value-of select="'StellarComp'"/>
                </xsl:attribute>
                <xsl:element name="AdaptiveMeshStellarComp">
                    <xsl:apply-templates select="@*|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    '''),
    ('''//VoronoiStellarSystem''',
    '''
    <xsl:template match="VoronoiStellarSystem">
        <xsl:element name="StellarSystem">
            <xsl:element name="components">
                <xsl:attribute name="type">
                    <xsl:value-of select="'StellarComp'"/>
                </xsl:attribute>
                <xsl:element name="VoronoiStellarComp">
                    <xsl:apply-templates select="@*|node()"/>
                </xsl:element>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    '''),

    # git 68: in ZubkoGraphiteGrainSizeDistribution elements, remove the attributes minSize and maxSize
    ('''//ZubkoPAHGrainSizeDistribution/@minSize | //ZubkoPAHGrainSizeDistribution/@maxSize |
        //ZubkoGraphiteGrainSizeDistribution/@minSize | //ZubkoGraphiteGrainSizeDistribution/@maxSize |
        //ZubkoSilicateGrainSizeDistribution/@minSize | //ZubkoSilicateGrainSizeDistribution/@maxSize''',
    '''
    <xsl:template match="//ZubkoPAHGrainSizeDistribution/@minSize | //ZubkoPAHGrainSizeDistribution/@maxSize">
    </xsl:template>
    <xsl:template match="//ZubkoGraphiteGrainSizeDistribution/@minSize | //ZubkoGraphiteGrainSizeDistribution/@maxSize">
    </xsl:template>
    <xsl:template match="//ZubkoSilicateGrainSizeDistribution/@minSize | //ZubkoSilicateGrainSizeDistribution/@maxSize">
    </xsl:template>
    '''),

    # terminate the list with a placeholder to keep the syntax of all previous items the same
    ("false()", "") )

# -----------------------------------------------------------------
