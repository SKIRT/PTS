/**

\page UserUse Using PTS classes and functions

\section UserUseDirs PTS source code directories

The PTS Python source code resides in three directories inside the \c PTS/git directory:

 - the \c pts directory contains the Python code for all toolkit classes and functions; i.e. the bulk of the PTS
   functionality. The files in this directory make up a Python \em package in the formal meaning of the word;
   each source file can be imported as a Python \em module.
 - the \c eagle directory contains Python classes and functions dedicated to the EAGLE project;
   see the \ref EagleGuide for more information.
 - the \c do directory contains a set of small Python scripts intended to be invoked from the command line.
   Strictly speaking these files are not part of a package since they cannot be imported as a module.

An overview of the files in each directory, with links to a more detailed description, can be found in the
reference material for "namespaces", a slightly unusual term automatically generated by the documentation system.

\section UserUsePts Using classes and functions in the pts directory

The files in the \c pts directory make up a Python \em package in the formal meaning of the word;
each source file can be imported as a \em module. For example, to obtain information on the instruments in a ski file
called "mysim.ski" (residing in the current directory), you may enter the following commands in a Terminal window:

\verbatim
$ python
Enthought Python Distribution ...
>>> from pts.skifile import SkiFile
>>> ski = SkiFile("mysim.ski")
>>> ski.instrumentnames()
['xy', 'xz', 'yz', 'o1']
>>> ski.instrumentshape()
(500, 500)
>>>
\endverbatim

Or to get a simulated preview for a SKIRT instrument with certain position angles, you may enter:

\verbatim
$ python
Enthought Python Distribution ...
>>> import pts.viewangles as va
>>> v = va.ViewAngles()
>>> v.distant(70, 35, 0)
>>>
\endverbatim

Which should bring up a seperate window showing the simulated view using a simple scene.

More likely, you will use the classes and functions in this package to build more complex Python scripts, or
to implement new functionality in the package itself.

Please refer to the documentation for each individual module for more details on its use.

\section UserUseDo Using scripts in the do directory

The Python scripts in the \c do directory are intended to be invoked from the command line.
Most scripts accept one or more command line arguments and call on functions in the Python Toolkit for SKIRT (PTS),
effectively exposing PTS functionality to the command line.

Before proceeding, ensure that your login script includes the extra lines as described in \ref InstallMacSetUp,
and that you have restarted the Terminal application after that change.

To execute a Python script named \c example.py residing in the \c do directory, enter "pts example" on the command line.
This will work regardless of your current directory.
You can include command line arguments as well, as in "pts example arg1 arg2".
The following example invokes the trial script provided with PTS:

\verbatim
$ pts try arg1 arg2
Executing: try arg1 arg2
Starting try...
['/Users/pcamps/PTS/svn/src/do/try.py', 'arg1', 'arg2']
Finished try.
$
\endverbatim

To see a list of the available scripts, enter "pts" without any arguments:

\verbatim
$ pts
Available scripts:
  analyze
  convert
  flybymovie
  plotgrids
  ...
  upgradeskifiles
$
\endverbatim

You can shorten the script name in the pts command to the first few letters as long as there are no two scripts
with matching names. For example "pts exa arg1 arg2" would still execute \c example.py, assuming that only one
script has a name starting with the string "exa".

Use "ipts" rather than "pts" to enter interactive Python mode (with the >>> prompt) after executing the script.
This is useful for testing or experimenting with pts functionality: the script imports the relevant
pts module(s) and initializes some key objects that then can be used from the interactive Python prompt.

Please refer to the documentation for each individual script for more details on its use.

*/
